help(lm)
# LOAD THE DATA INTO THE SESSION
# (THE DATA ARE STORED IN A STATA'S .dta FILE)
# (THE FUNCTION read.dta IN THE PACKAGE foreign CAN DO THE JOB)
# (THE PACKAGE IS NOT PRE-LOADED INTO THE SESSION AND NEEDS TO BE LOADED)
library(foreign)
data <- read.dta("londondataset2002_2006.dta")
setwd("~/msc_applied_mathematics/4_semester/master_thesis/code/master_thesis/data")
data <- read.dta("londondataset2002_2006.dta")
data<- read.dta("ije-2012-10-0989-File003")
data<- read.dta("ije-2012-10-0989-File003.dta")
# SET THE DEFAULT ACTION FOR MISSING DATA TO na.exclude
# (MISSING EXCLUDED IN ESTIMATION BUT RE-INSERTED IN PREDICTION/RESIDUALS)
options(na.action="na.exclude")
# SET THE PLOTTING PARAMETERS FOR THE PLOT (SEE ?par)
oldpar <- par(no.readonly=TRUE)
par(mex=0.8,mfrow=c(2,1))
# SUB-PLOT FOR DAILY DEATHS, WITH VERTICAL LINES DEFINING YEARS
plot(data$date,data$numdeaths,pch=".",main="Daily deaths over time",
ylab="Daily number of deaths",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=2)
# THE SAME FOR OZONE LEVELS
plot(data$date,data$ozone,pch=".",main="Ozone levels over time",
ylab="Daily mean ozone level (ug/m3)",xlab="Date")
abline(v=data$date[grep("-01-01",data$date)],col=grey(0.6),lty=2)
par(oldpar)
layout(1)
# SUMMARY
summary(data)
# OTHER USEFUL FUNCTIONS IN THE PACKAGE epicals
# (THE PACKAGE IS NOT PRESENT IN THE DEFAULT R INSTALLATION)
# (IT NEED TO BE INSTALLED AND THEN LOADED INTO THE SESSION)
install.packages("epicalc")
library(epicalc)
des(data)
summ(data)
# CORRELATIONS
cor(data[,2:4])
data$ozone10 <- data$ozone/10
# GENERATE MONTH AND YEAR
data$month <- as.factor(months(data$date,abbr=TRUE))
data$year <- as.factor(substr(data$date,1,4))
# FIT A POISSON MODEL WITH A STRATUM FOR EACH MONTH NESTED IN YEAR
# (USE OF quasipoisson FAMILY FOR SCALING THE STANDARD ERRORS)
model1 <- glm(numdeaths ~ month/year,data,family=quasipoisson)
summary(model1)
# COMPUTE PREDICTED NUMBER OF DEATHS FROM THIS MODEL
pred1 <- predict(model1,type="response")
plot(data$date,data$numdeaths,ylim=c(100,300),pch=19,cex=0.2,col=grey(0.6),
main="Time-stratified model (month strata)",ylab="Daily number of deaths",
xlab="Date")
lines(data$date,pred1,lwd=2)
# GENERATE FOURIER TERMS
# (USE FUNCTION harmonic, IN PACKAGE tsModel TO BE INSTALLED AND THEN LOADED)
install.packages("tsModel")
library(tsModel)
library(tsModel)
# 4 SINE-COSINE PAIRS REPRESENTING DIFFERENT HARMONICS WITH PERIOD 1 YEAR
data$time <- seq(nrow(data))
fourier <- harmonic(data$time,nfreq=4,period=365.25)
# FIT A POISSON MODEL FOURIER TERMS + LINEAR TERM FOR TREND
# (USE OF quasipoisson FAMILY FOR SCALING THE STANDARD ERRORS)
model2 <- glm(numdeaths ~ fourier + time,data,family=quasipoisson)
summary(model2)
# COMPUTE PREDICTED NUMBER OF DEATHS FROM THIS MODEL
pred2 <- predict(model2,type="response")
plot(data$date,data$numdeaths,ylim=c(100,300),pch=19,cex=0.2,col=grey(0.6),
main="Sine-cosine functions (Fourier terms)",ylab="Daily number of deaths",
xlab="Date")
lines(data$date,pred2,lwd=2)
# GENERATE SPLINE TERMS
# (USE FUNCTION bs IN PACKAGE splines, TO BE LOADED)
library(splines)
# A CUBIC B-SPLINE WITH 32 EQUALLY-SPACED KNOTS + 2 BOUNDARY KNOTS
# (NOTE: THIS PARAMETERIZATION IS SLIGHTLY DIFFERENT THAN STATA'S)
# (THE 35 BASIS VARIABLES ARE SET AS df, WITH DEFAULT KNOTS PLACEMENT. SEE ?bs)
# (OTHER TYPES OF SPLINES CAN BE PRODUCED WITH THE FUNCTION ns. SEE ?ns)
spl <- bs(data$time,degree=3,df=35)
# FIT A POISSON MODEL FOURIER TERMS + LINEAR TERM FOR TREND
# (USE OF quasipoisson FAMILY FOR SCALING THE STANDARD ERRORS)
model3 <- glm(numdeaths ~ spl,data,family=quasipoisson)
summary(model3)
# COMPUTE PREDICTED NUMBER OF DEATHS FROM THIS MODEL
pred3 <- predict(model3,type="response")
plot(data$date,data$numdeaths,ylim=c(100,300),pch=19,cex=0.2,col=grey(0.6),
main="Flexible cubic spline model",ylab="Daily number of deaths",
xlab="Date")
lines(data$date,pred3,lwd=2)
# GENERATE RESIDUALS
res3 <- residuals(model3,type="response")
plot(data$date,res3,ylim=c(-50,150),pch=19,cex=0.4,col=grey(0.6),
main="Residuals over time",ylab="Residuals (observed-fitted)",xlab="Date")
abline(h=1,lty=2,lwd=2)
# COMPARE THE RR (AND CI)
# (COMPUTED WITH THE FUNCTION ci.lin IN PACKAGE Epi, TO BE INSTALLED AND LOADED)
install.packages("Epi")
library(Epi)
# UNADJUSTED MODEL
model4 <- glm(numdeaths ~ ozone10,data,family=quasipoisson)
summary(model4)
(eff4 <- ci.lin(model4,subset="ozone10",Exp=T))
# CONTROLLING FOR SEASONALITY (WITH SPLINE AS IN MODEL 3)
model5 <- update(model4,.~.+spl)
summary(model5)
(eff5 <- ci.lin(model5,subset="ozone10",Exp=T))
# CONTROLLING FOR TEMPERATURE
# (TEMPERATURE MODELLED WITH CATEGORICAL VARIABLES FOR DECILES)
# (MORE SOPHISTICATED APPROACHES ARE AVAILABLE - SEE ARMSTRONG EPIDEMIOLOGY 2006)
cutoffs <- quantile(data$temperature,probs=0:10/10)
tempdecile <- cut(data$temperature,breaks=cutoffs,include.lowest=TRUE)
model6 <- update(model5,.~.+tempdecile)
summary(model6)
(eff6 <- ci.lin(model6,subset="ozone10",Exp=T))
# BUILD A SUMMARY TABLE WITH EFFECT AS PERCENT INCREASE
tabeff <- rbind(eff4,eff5,eff6)[,5:7]
tabeff <- (tabeff-1)*100
dimnames(tabeff) <- list(c("Unadjusted","Plus season/trend","Plus temperature"),
c("RR","ci.low","ci.hi"))
round(tabeff,2)
# BUILD A SUMMARY TABLE WITH EFFECT AS PERCENT INCREASE
tabeff <- rbind(eff4,eff5,eff6)[,5:7]
tabeff <- (tabeff-1)*100
dimnames(tabeff) <- list(c("Unadjusted","Plus season/trend","Plus temperature"),
c("RR","ci.low","ci.hi"))
round(tabeff,2)
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
tablag
plot(0:7,0:7,type="n",ylim=c(0.99,1.03),main="Lag terms modelled one at a time",
xlab="Lag (days)",ylab="RR and 95%CI per 10ug/m3 ozone increase")
abline(h=1)
arrows(0:7,tablag[,2],0:7,tablag[,3],length=0.05,angle=90,code=3)
points(0:7,tablag[,1],pch=19)
# FACILITATED BY THE FUNCTIONS IN PACKAGE dlnm, TO BE DOWNLOADED AND LOADED
install.packages("dlnm")
library(dlnm)
# PRODUCE THE CROSS-BASIS FOR OZONE (SCALING NOT NEEDED)
# A SIMPLE UNSTRANSFORMED LINEAR TERM AND THE UNCONSTRAINED LAG STRUCTURE
cbo3unc <- crossbasis(data$ozone,lag=c(0,7),argvar=list(type="lin",cen=FALSE),
arglag=list(type="integer"))
summary(cbo3unc)
tablag
log(1.007482)
log(tablag)
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=F)[5:7]
}
tablag
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=F)[5:7]
}
tablag
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
tablag
log(tablag)
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
summary(mod)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
summary(mod)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
summary(mod)
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
summary(mod)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
summary(mod)
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
print(summary(mod))
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
print(summary(mod))
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
print(i, summary(mod))
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
# PREPARE THE TABLE WITH ESTIMATES
tablag <- matrix(NA,7+1,3,dimnames=list(paste("Lag",0:7),
c("RR","ci.low","ci.hi")))
# RUN THE LOOP
for(i in 0:7) {
# LAG OZONE AND TEMPERATURE VARIABLES
ozone10lag <- Lag(data$ozone10,i)
tempdecilelag <- cut(Lag(data$temperature,i),breaks=cutoffs,
include.lowest=TRUE)
# DEFINE THE TRANSFORMATION FOR TEMPERATURE
# LAG SAME AS ABOVE, BUT WITH STRATA TERMS INSTEAD THAN LINEAR
mod <- glm(numdeaths ~ ozone10lag + tempdecilelag + spl,data,
family=quasipoisson)
print(c("Lag: ", i))
print(summary(mod))
tablag[i+1,] <- ci.lin(mod,subset="ozone10lag",Exp=T)[5:7]
}
tablag
log(1.007482^(1/10))
log(1.0042176^(1/10))
log(1.010756^(1/10))
